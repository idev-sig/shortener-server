name: Docker-Main

on:
  push:
    branches:
      - main
    paths:
      - docker-bake.hcl
      - "deploy/docker/Dockerfile"
      - ".github/workflows/docker-main.yml"
      - "internal/**"
      - "go.mod"
      - "go.sum"
      - "justfile"

env:
  branch: main
  image_org: idevsig
  package_name: shortener-server
  acr_registry: registry.cn-guangzhou.aliyuncs.com
  hcr_registry: swr.ap-southeast-3.myhuaweicloud.com
  tcr_registry: ccr.ccs.tencentyun.com

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      repo: ${{ steps.set_repo.outputs.repo }}
    steps:
      - name: Checkout Source Code
        uses: actions/checkout@v4

      - name: Set repo
        id: set_repo
        env:
          IMAGE_REPO: ${{ env.image_org }}/${{ env.package_name }}
        run: |
          echo "repo=${{ env.IMAGE_REPO }}" >> $GITHUB_OUTPUT

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.IMAGE_REPO || '' }}
          labels: |
            org.opencontainers.image.title=Shortener
            org.opencontainers.image.description=Shortener is a URL shortening service.
            org.opencontainers.image.vendor=Jetsung Chan
          tags: |
            ${{ env.branch }}

      - name: Build with Bake
        uses: docker/bake-action@v6
        with:
          files: |
            ./docker-bake.hcl
            cwd://${{ steps.meta.outputs.bake-file }}
          targets: release
          push: ${{ github.event_name != 'pull_request' }}

  sync-to-ghcr:
    needs: build
    runs-on: ubuntu-24.04
    steps:
    - name: Install Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y skopeo
        skopeo --version
    - name: Login to GitHub Container Registry (ghcr.io)
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    - name: Sync to GitHub Container Registry (ghcr.io)
      env:
        SRC_IMAGE: ${{ needs.build.outputs.repo }}:${{ env.branch }}
        DEST_REPO: ghcr.io/${{ github.repository_owner }}/${{ env.package_name }}
        DEST_TAG: ${{ env.branch }}
      run: |
        skopeo copy --all docker://${{ env.SRC_IMAGE }} docker://${{ env.DEST_REPO }}:${{ env.DEST_TAG }}
    - uses: actions/delete-package-versions@v5
      continue-on-error: true
      with:
        package-name: ${{ env.package_name }}
        package-type: 'container'
        min-versions-to-keep: 2
        delete-only-untagged-versions: 'true'


  sync-to-aliyun:
    needs: build
    runs-on: ubuntu-24.04
    steps:
    - name: Install Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y skopeo
    - name: Login to Aliyun
      uses: docker/login-action@v3
      with:
        registry: ${{ env.acr_registry }}
        username: ${{ secrets.ALIYUN_USERNAME }}
        password: ${{ secrets.ALIYUN_TOKEN }}
    - name: Sync to Aliyun
      env:
        SRC_IMAGE: ${{ needs.build.outputs.repo }}:${{ env.branch }}
        DEST_REPO: ${{ env.acr_registry }}/${{ env.image_org }}/${{ env.package_name }}
        DEST_TAG: ${{ env.branch }}
      run: |
        skopeo copy --all docker://${{ env.SRC_IMAGE }} docker://${{ env.DEST_REPO }}:${{ env.DEST_TAG }}

  sync-to-tencent:
    needs: build
    runs-on: ubuntu-24.04
    steps:
    - name: Install Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y skopeo
    - name: Login to Tencent
      uses: docker/login-action@v3
      with:
        registry: ${{ env.tcr_registry }}
        username: ${{ secrets.TENCENT_USERNAME }}
        password: ${{ secrets.TENCENT_TOKEN }}
    - name: Sync to Tencent
      env:
        SRC_IMAGE: ${{ needs.build.outputs.repo }}:${{ env.branch }}
        DEST_REPO: ${{ env.tcr_registry }}/${{ env.image_org }}/${{ env.package_name }}
        DEST_TAG: ${{ env.branch }}
      run: |
        skopeo copy --all docker://${{ env.SRC_IMAGE }} docker://${{ env.DEST_REPO }}:${{ env.DEST_TAG }}
